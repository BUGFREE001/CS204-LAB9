
#1


program 1. where yy structure is given, Structure variable should be declare like this otherwise error occur. 
           Also return 0 is missing.


----------------------------------------------

program 2. In this program struct is not closed using semicolon, and non pointer conversion is used here which is not allowed in c. 
           Also return 0 is missing.A


----------------------------------------------


program 3: There is no error in this program. succesful run output is


			origin is (00)

			origin is (00)

			only return 0 is missing.
		

----------------------------------------------


program 4: lots of error are present in this program.
	   we can not create struct variable before its definition.
	   here struct name is student but used like a variable and rollno is not given but it is used as a variable 
	   and also return 0 is missing because int main is used to avoid this void main should be used.






-----------------------------------------------------------------------------------------------------------------------------------



#2




//invalid because, a self referential structure can not be incomplete

//here if we want to make it work, then b should of a pointer type

struct a {

int x;

struct a b;

};

_________________________________________________________________

This is valid

struct a {

int x;

struct a *b;

};

_________________________________________________________________

//this is invalid

//No matter we are defining the name of the structure but the name definition is after the structure-name use



typedef struct a {

int x;

aType *b;

}aType;

_________________________________________________________________

//this is valid

//beacuse first we are defining the name of the structure, and after that we are using it.

typedef struct a aType;

struct a {

int x;

aType *b;

};

_________________________________________________________________

//invalid

//because no matter we are defining name of the structre

//but we are using that name before the actual structure is even defined.

int main(void) {

typedef struct a aType;

aType var;

struct a{

int c;

aType *b;

};

}

_________________________________________________________________

struct {

char a;

short b;

int c;

}temp;

size of this structure is 7 bytes, (1 byte for char, 2 bytes for short, 4 bytes for int)

But due tp structure padding, compiler will allocate size 8 bytes.

Answer is 8 Bytes








----------------------------------------------------------------------------------------------------------------------------




#3

struct time{
	int min;
	int sec;
	int hour;
};

int main()
{
	struct time *p;
    p=&time;
    p->sec = 10;
}




----------------------------------------------------------------------------------------------------------------------------


#4

struct distance{
	int x;
	int y;
};

int main()
{
	struct distance mn;
	printf("Enter point x and point y: ");
	scanf("%d%d", &mn.x, &mn.y);
	int a = mn.x;
	int b = mn.y;
	int c=a-b;
	printf("Distance is: %d". mn(c));
}






----------------------------------------------------------------------------------------------------------------------------





#5




#include <stdio.h>

struct student
{
int rollno;
char *name;
int age;
};

struct student struct_function(struct student s1)
{
s1.rollno = 20;
s1.name = "Hari";
s1.age = 22;
return s1;
}

int main()
{
struct student s1;
s1 = struct_function(s1);
  
printf("Roll no: %d\n",s1.rollno);
printf("Name: %s\n",s1.name);
printf("Age: %d\n",s1.age);
return 0;
}














----------------------------------------------------------------------------------------------------------------------------


#6



#include <stdio.h>

typedef struct complex
{
  
int realNumber;
int imgNumber;
} complex;

int main()
{

complex num1, num2, sum, sub;
 
printf("Enter the real and imaginary part of first complex number: ");
scanf("%d%d", &num1.realNumber, &num1.imgNumber);
printf("Enter the real and imaginary part of second complex number: ");
scanf("%d%d", &num2.realNumber, &num2.imgNumber);
  
if(num1.imgNumber >= 0)
printf("\nFirst complex number is = %d + %di\n", num1.realNumber, num1.imgNumber);
else
printf("\nFirst complex number is = %d %di\n", num1.realNumber, num1.imgNumber);
if(num2.imgNumber >= 0)
printf("Second complex number is = %d + %di\n", num2.realNumber, num2.imgNumber);
else
printf("Second complex number is = %d %di\n", num2.realNumber, num2.imgNumber);

sum.realNumber = num1.realNumber + num2.realNumber;
sum.imgNumber = num1.imgNumber + num2.imgNumber;
  
sub.realNumber = num1.realNumber - num2.realNumber;
sub.imgNumber = num1.imgNumber - num2.imgNumber;

if(sum.imgNumber >= 0)
printf("\nSum = %d + %di\n", sum.realNumber, sum.imgNumber);
else
printf("\nSum = %d %di\n", sum.realNumber, sum.imgNumber);
  
if(sub.imgNumber >= 0)
printf("Subtraction = %d + %di\n", sub.realNumber, sub.imgNumber);
else
printf("Subtraction = %d %di\n", sub.realNumber, sub.imgNumber);
  
return 0;
}







--------------------------------------------------------------------------------------------------------------------------------



#7


Union
---------------------

#include <stdio.h>

union Job
{
   float salary;
   int workerNo;
} j;
int main()
{
   j.salary = 12.3;
   j.workerNo = 100;
   printf("Salary = %.1f\n", j.salary);
   printf("Number of workers = %d", j.workerNo);
   return 0;
}

-----------------------------------------------------


Enumerations
-----------------------

#include<stdio.h>

enum week{Mon=10, Tue, Wed, Thur, Fri=10, Sat=16, Sun};
enum day{Mond, Tues, Wedn, Thurs, Frid=18, Satu=11, Sund};

int main() {
   printf("The value of enum week: %d\t%d\t%d\t%d\t%d\t%d\t%d\n\n",Mon , Tue, Wed, Thur, Fri, Sat, Sun);
   printf("The default value of enum day: %d\t%d\t%d\t%d\t%d\t%d\t%d",Mond , Tues, Wedn, Thurs, Frid, Satu, Sund);
   return 0;
}





--------------------------------------------------------------------------------------------------------------------------------



#8 (Bonus)


#include <stdio.h> 
#include <stdlib.h> 

struct Node { 
    int data; 
    struct Node* next; 
}; 
  
void push(struct Node** head_ref, int new_data) { 
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node)); 
    new_node->data = new_data; 
    new_node->next = (*head_ref); 
    (*head_ref) = new_node; 
} 
  
int detectloop(struct Node* list) { 
    struct Node *slow_p = list, *fast_p = list; 
    while (slow_p && fast_p && fast_p->next) { 
        slow_p = slow_p->next; 
        fast_p = fast_p->next->next; 
        if (slow_p == fast_p) { 
            printf("Found Loop"); 
            return 1; 
        } 
    } 
    return 0; 
} 
  

int main() 
{ 
    struct Node* head = NULL; 
    push(&head, 20); 
    push(&head, 4); 
    push(&head, 15); 
    push(&head, 10); 
    head->next->next->next->next = head; 
    detectloop(head); 
  
    return 0; 
} 











